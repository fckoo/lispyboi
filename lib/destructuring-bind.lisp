(provide "destructuring-bind")

(defmacro destructuring-bind (destructure-list expression &body body)
  (let* ((var (gensym))
         (let-vars))
    (labels ((destructure-list (list thing)
               (cond ((null list) nil)
                     ((consp (car list))
                      (destructure-list (car list) `(car ,thing))
                      (destructure-list (cdr list) `(cdr ,thing)))
                     ((listp (cdr list))
                      (push `(,(car list) (car ,thing)) let-vars)
                      (destructure-list (cdr list) `(cdr ,thing)))
                     ((symbolp list)
                      (push `(,list ,thing) let-vars))
                     (t
                      (push `(,(car list) (car ,thing)) let-vars)
                      (push `(,(cdr list) (cdr ,thing)) let-vars)))))
      (destructure-list destructure-list var))
    `(let* ((,var ,expression)
            ,@(reverse let-vars))
       ,@body)))
