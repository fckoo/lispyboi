(setq list (lambda (&rest lst) lst))
(defmacro defun (name argslist &rest body)
  (list 'setq name (cons 'lambda (cons argslist body))))

(defun null (obj) (eq nil obj))
(defun not (obj) (if obj nil t))
(defun cadr (lst) (car (cdr lst)))
(defun cadar (lst) (car (cdr (car lst))))
(defun caddr (lst) (car (cdr (cdr lst))))
(defun cadddr (lst) (car (cdr (cdr (cdr lst)))))
(defun caddddr (lst) (car (cdr (cdr (cdr (cdr lst))))))
(defun caar (lst) (car (car lst)))
(defun caaar (lst) (car (car (car lst))))
(defun caadr (lst) (car (car (cdr lst))))
(defun caaadr (lst) (car (car (car (cdr lst)))))
(defun caaaadr (lst) (car (car (car (car (cdr lst))))))
(defun cddr (lst) (cdr (cdr lst)))
(defun cdddr (lst) (cdr (cdr (cdr lst))))
(defun cddddr (lst) (cdr (cdr (cdr (cdr lst)))))
(defun cdddddr (lst) (cdr (cdr (cdr (cdr (cdr lst))))))
(defmacro first (lst) (list 'car lst))
(defmacro rest (lst) (list 'cdr lst))
(defmacro second (lst) (list 'cadr lst))
(defmacro third (lst) (list 'caddr lst))
(defmacro fourth (lst) (list 'cadddr lst))
(defmacro fifth (lst) (list 'caddddr lst))

(defun append (x y)
  (if x
      (cons (car x) (append (cdr x) y))
      (cons y nil)))

(defun concatenate (x y)
  (if x
      (cons (car x) (concatenate (cdr x) y))
      y))

(defmacro let (args &rest body)
  (defun get-syms (args)
    (if (null args)
        nil
        (cons (caar args) (get-syms (cdr args)))))
  (defun get-vals (args)
    (if (null args)
        nil
        (cons (cadar args) (get-vals (cdr args)))))
  (cons (cons 'lambda (cons (get-syms args) body))
        (get-vals args)))

(defmacro and (&rest exprs)
  (defun and-helper (args)
    (if (null (cdr args))
        (car args)
        (list 'if (car args) (and-helper (cdr args)))))
  (and-helper exprs))

(defun consp (obj) (eq 'cons (type-of obj)))

(defmacro quasiquote (exp)
  (defun qq-list (l)
    (if (consp l)
        (let ((obj (first l)))
          (if (and (consp obj) (eq (first obj) 'unquote-splicing))
              (if (rest l)
                  (list 'concatenate (second obj) (qq-list (rest l)))
                  (second obj))
              (list 'cons (qq-object obj) (qq-list (rest l)))))
        (list 'quote l)))

  (defun qq-element (l)
    (if (eq (first l) 'unquote)
        (second l)
        (qq-list l)))

  (defun qq-object (object)
    (if (consp object)
        (qq-element object)
        (list 'quote object)))
  (qq-object exp))

(setq foo 123)
(setq bar '(a b c))
(quasiquote ((unquote foo) 4 5 h i j (unquote-splicing bar) x y z))

