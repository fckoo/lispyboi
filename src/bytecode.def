
//
// The virtual machine using this bytecode operates with two stacks known as the:
// P-stack or "parameter" stack where intermediate values for operations are stored.
// R-stack or "return" stack where the return address of a funcall opcode intends to
// return.
//

// To use this file, #define BYTECODE_DEF(...) with how you intend to use each attribute
// and then #include this file. e.g.:
//    enum byte_code_op {
//    #define BYTECODE_DEF(name, noperands, nargs, size, docstring) name,
//            #include "bytecode.def"
//    #undef BYTECODE_DEF
//    };
//
// The terms represent as follows:
//    name: a c++ indentifier representing the name of the opcode
//    noperands: the number of operands directly embedded in the bytecode
//    nargs: the number of values that will be popped from the P-stack
//    size: the size, in bytes, of the instruction
//    docstring: a c++ string literal representing documentation of the bytecode

#if !defined(BYTECODE_DEF)
#define BYTECODE_DEF(name, noperands, nargs, size, docstring)
#endif

BYTECODE_DEF(apply,
1, // noperands
2, // nargs
1+sizeof(uint32_t), // size
"Pop A from P-stack as the function to call\n"
"Pop B from P-stack as the list of arguments to be merged.\n"
"Lisp APPLY form, similar to FUNCALL except the last argument(B) must be a list.\n"
"The last argument is dropped the the contents of it are appened to the rest\n"
"of the arguments before calling the function.")


BYTECODE_DEF(funcall,
1, // noperands
1, // nargs
1+sizeof(uint32_t), // size
"A = pop one values from P-stack as the callable thing\n"
"B = the (uint32_t)operand as the number of arguments being passed\n"
"C = pop B values from stack as a list where the last element was the first\n"
"    popped\n"
"if A is a symbol:\n"
"    A = A.function\n"
"if A is interpreted:\n"
"    extend A's environment with C\n"
"    push addr of instruction after this call instruction to R-stack\n"
"    jump to callable code\n"
"else:\n"
"    call native with C")


BYTECODE_DEF(gotocall,
1, // noperands
1, // nargs
1+sizeof(uint32_t), // size
"Exactly like FUNCALL except no return address is pushed to the R-stack\n"
"This is meant to implement tail call optimization")


BYTECODE_DEF(pop_handler_case,
0, // noperands
0, // nargs
1, // size
"Pop and restore from R-stack\n"
"Pop one HANDLER-CASE from the VM's HANDLER-CASE stack.")


BYTECODE_DEF(return,
0, // noperands
0, // nargs
1, // size
"Pop R-stack and jump to location popped")


BYTECODE_DEF(jump,
1, // noperands
0, // nargs
1+sizeof(int32_t), // size
"Add (int32_t)operand to IP")


BYTECODE_DEF(pop_jump_if_nil,
1, // noperands
1, // nargs
1+sizeof(uint32_t), // size
"Pop one value from P-stack\n"
"  A = the first value popped as the object to test\n"
"  B = the (int32_t)operand\n"
"if A is nil:\n"
"    Add B to IP\n"
"else:\n"
"    continue execution")


BYTECODE_DEF(get_global,
1, // noperands
0, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(set_global,
1, // noperands
1, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(get_local,
1, // noperands
0, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(set_local,
1, // noperands
1, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(get_capture,
1, // noperands
0, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(set_capture,
1, // noperands
1, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(function_value,
1, // noperands
0, // nargs
1+sizeof(lisp::Value), // size
"A = the (Value)operand as a symbol\n"
"if A has a function:\n"
"    push A.function to P-stack\n"
"else:\n"
"    push nil to P-stack")


BYTECODE_DEF(pop,
0, // noperands
0, // nargs
1, // size
"Pop top of P-stack and discard it")


BYTECODE_DEF(push_value,
1, // noperands
0, // nargs
1+sizeof(lisp::Value), // size
"Push (Value)operand value to P-stack")


// The literal values NIL, 0, and 1 are so common they deserve their own opcodes

BYTECODE_DEF(push_nil,
0, // noperands
0, // nargs
1, // size
"Push nil to P-stack")


BYTECODE_DEF(push_fixnum_0,
0, // noperands
0, // nargs
1, // size
"Push the fixnum 0 to P-stack")


BYTECODE_DEF(push_fixnum_1,
0, // noperands
0, // nargs
1, // size
"Push the fixnum 1 to P-stack")


BYTECODE_DEF(instantiate_closure,
1, // noperands
0, // nargs
1+sizeof(void*), // size
"")


BYTECODE_DEF(close_values,
1, // noperands
0, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(stack_alloc,
1, // noperands
0, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(stack_free,
1, // noperands
0, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(cons,
0, // noperands
2, // nargs
1, // size
"A = the first value popped from the P-stack\n"
"B = the second value popped from the P-stack\n"
"Push CONS(A, B) to the P-stack")


BYTECODE_DEF(car,
0, // noperands
1, // nargs
1, // size
"Pop top of stack and push its CAR component to P-stack")


BYTECODE_DEF(cdr,
0, // noperands
1, // nargs
1, // size
"Pop top of stack and push its CDR component to P-stack")


BYTECODE_DEF(halt,
0, // noperands
0, // nargs
1, // size
"Halt execution of the VM")


BYTECODE_DEF(push_handler_case,
2, // noperands
0, // nargs
1+sizeof(uint32_t)+sizeof(uint32_t), // size
"A = first (uint32_t)operand\n"
"B = second (uint32_t)operand\n"
"Push IP+B to R-stack\n"
"Pop A*2 from P-stack as handler+tag pairs, the restore state and handlers are pushed\n"
"to the VM's HANDLER-CASE stack.")


BYTECODE_DEF(raise_signal,
1, // noperands
1, // nargs
1+sizeof(uint32_t), // size
"")


BYTECODE_DEF(eq,
0, // noperands
2, // nargs
1, // size
"B = Pop from P-stack\n"
"A = Pop from P-stack\n"
"if identity(A) == identity(B):\n"
"    push T to P-stack\n"
"else:\n"
"    push NIL to P-stack")


BYTECODE_DEF(rplaca,
0, // noperands
2, // nargs
1, // size
"B = Pop from P-stack\n"
"A = Top of P-stack as cons\n"
"Replace the CAR of A with B")


BYTECODE_DEF(rplacd,
0, // noperands
2, // nargs
1, // size
"B = Pop from P-stack\n"
"A = Top of P-stack as cons\n"
"Replace the CDR of A with B")


BYTECODE_DEF(aref,
0, // noperands
2, // nargs
1, // size
"B = Pop from P-stack as fixnum\n"
"A = Pop from P-stack as array\n"
"Push the B'th element of A to P-stack")


BYTECODE_DEF(aset,
0, // noperands
3, // nargs
1, // size
"C = Pop from P-stack\n"
"B = Pop from P-stack as fixnum\n"
"A = Top of P-stack as array\n"
"Set the B'th element of A to C")


BYTECODE_DEF(debug_trap,
0, // noperands
1, // nargs
1, // size
"Pop top of P-stack, if it's NIL disable debugger, otherwise enable it.")


#undef BYTECODE_DEF
